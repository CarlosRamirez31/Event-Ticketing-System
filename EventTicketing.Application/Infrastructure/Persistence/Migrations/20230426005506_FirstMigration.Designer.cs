// <auto-generated />
using System;
using EventTicketing.Application.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventTicketing.Application.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(EventTicketingContext))]
    [Migration("20230426005506_FirstMigration")]
    partial class FirstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventTicketing.Application.Domain.Entities.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventCreatedBy")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EventId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("EventTicketing.Application.Domain.Entities.EventPrice", b =>
                {
                    b.Property<int>("EventPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventPriceId"));

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("EventPriceId");

                    b.HasIndex("EventId");

                    b.HasIndex("ZoneId");

                    b.ToTable("EventPrices");
                });

            modelBuilder.Entity("EventTicketing.Application.Domain.Entities.Place", b =>
                {
                    b.Property<int>("PlaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlaceId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.Property<int>("Row")
                        .HasColumnType("int");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("PlaceId");

                    b.HasIndex("ZoneId");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("EventTicketing.Application.Domain.Entities.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<int>("EventPriceId")
                        .HasColumnType("int");

                    b.Property<string>("ParticipantName")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.HasKey("TicketId");

                    b.HasIndex("EventPriceId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("EventTicketing.Application.Domain.Entities.Zone", b =>
                {
                    b.Property<int>("ZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ZoneId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ZoneId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("EventTicketing.Application.Domain.Entities.EventPrice", b =>
                {
                    b.HasOne("EventTicketing.Application.Domain.Entities.Event", "Event")
                        .WithMany("EventPrices")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EventPriceEvent");

                    b.HasOne("EventTicketing.Application.Domain.Entities.Zone", "Zone")
                        .WithMany("EventPrices")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EventPriceZone");

                    b.Navigation("Event");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("EventTicketing.Application.Domain.Entities.Place", b =>
                {
                    b.HasOne("EventTicketing.Application.Domain.Entities.Zone", "Zone")
                        .WithMany("Places")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PlaceZone");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("EventTicketing.Application.Domain.Entities.Ticket", b =>
                {
                    b.HasOne("EventTicketing.Application.Domain.Entities.EventPrice", "EventPrice")
                        .WithMany("Tickets")
                        .HasForeignKey("EventPriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TicketEventPrice");

                    b.HasOne("EventTicketing.Application.Domain.Entities.Place", "Place")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_TicketPlace");

                    b.Navigation("EventPrice");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("EventTicketing.Application.Domain.Entities.Event", b =>
                {
                    b.Navigation("EventPrices");
                });

            modelBuilder.Entity("EventTicketing.Application.Domain.Entities.EventPrice", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("EventTicketing.Application.Domain.Entities.Place", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("EventTicketing.Application.Domain.Entities.Zone", b =>
                {
                    b.Navigation("EventPrices");

                    b.Navigation("Places");
                });
#pragma warning restore 612, 618
        }
    }
}
